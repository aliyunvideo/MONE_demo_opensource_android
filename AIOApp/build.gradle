plugins {
    id 'com.android.application'
}
android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "com.aliyun.aio.demo"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode VERSION_CODE as int
        versionName VERSION_NAME

        ndk {
            abiFilters "armeabi-v7a",'arm64-v8a'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        flavorDimensions "versionCode"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: 'app']
            }
        }

    }
    signingConfigs {
        debug {
            //TODO: 设置您的签名信息，以下为示例
        }
        release {
            //TODO: 设置您的签名信息，以下为示例
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField("int","APK_TYPE", "0")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' ,
                    "$rootDir/AliLivePushDemo/alivc-livepusher-demo/proguard-rules.pro",
                    "$rootDir/AlivcUgsvDemo/UGSVApp/proguard-rules.pro"
                    "$rootDir/PlayerDemo/AUIPlayerApp/proguard-rules.pro"
            signingConfig signingConfigs.release
            buildConfigField("int","APK_TYPE", APK_TYPE)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            // 名称_android_版本号.apk
            outputFileName = "AIOApp_v${defaultConfig.versionName}_c${defaultConfig.versionCode}.apk"
        }
    }

    //推流配置
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/beans.xml'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
//      解决animoji和queen库so重复问题
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libMNN.so'
        pickFirst '**/libMNN_CL.so'
        pickFirst '**/libalivcffmpeg.so'
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
}


dependencies {
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    implementation externalAndroidXAppcompat
    implementation externalAndroidDesign
    implementation externalAndroidXConstraintlayout
    implementation project(':AUIFoundation:AVBaseUI')
    implementation project(':AUIFoundation:AVTheme')
    if (hasLive()) {
        println("hasLive implementation project(':LiveApp')")
        implementation project(':LiveApp')
    }
    if (hasPlayer()) {
        println("hasPlayer implementation project(':AUIPlayerApp')")
        implementation project(':AUIPlayerApp')
    }
    if (hasUGC()) {
        println("hasUGSV implementation project(':UGSVApp')")
        implementation project(':UGSVApp')
    }
    implementation externalAndroidMultiDex
    implementation externalAndroidDesign

    implementation  'com.umeng.umsdk:common:9.4.7'// 必选
    implementation  'com.umeng.umsdk:asms:1.4.1'// 必选

    implementation externalARouter
    annotationProcessor externalARouterCompiler
    implementation externalAllInOne
    if(hasInteractiveLive()){
        
    }
}

////FIX:AGP 4.X，will update AGP 7.x soon
//afterEvaluate {
//    def android = project.extensions.getByName("android")
//    String sdkDirectory = android ? android.getSdkDirectory() : null
//    println("sdkDirectory = " + sdkDirectory + " sys = " + System.properties['os.name'])
//    if(sdkDirectory != null && !sdkDirectory.isEmpty()){
//        String android_tool_path = new StringBuilder().append(sdkDirectory).append(File.separator)
//                .append("build-tools").append(File.separator)
//                .append(androidBuildToolsVersion).toString()
//        println("android_tool_path = " + android_tool_path)
//        def isWindows = System.properties['os.name'].toString().toLowerCase().contains("windows")
//        def d8_file_path = new StringBuilder().append(android_tool_path).append(File.separator).append(isWindows ? "d8.bat" : "d8").toString()
//        def dx_file_path = new StringBuilder().append(android_tool_path).append(File.separator).append(isWindows ? "dx.bat" : "dx").toString()
//        if (new File("${d8_file_path}").exists() && ! new File("${dx_file_path}").exists()) {
//            if (isWindows) {
//                copy {
//                    from "${d8_file_path}"
//                    into "${dx_file_path}"
//                }
//            } else {
//                exec {
//                    commandLine 'ln','-s',"${d8_file_path}","${dx_file_path}"
//                }
//            }
//        }
//        def d8_jar_file_path = new StringBuilder().append(android_tool_path).append(File.separator).append("lib").append(File.separator).append("d8.jar").toString()
//        def dx_jar_file_path = new StringBuilder().append(android_tool_path).append(File.separator).append("lib").append(File.separator).append("dx.jar").toString()
//        if (new File("${d8_jar_file_path}").exists() &&! new File("${dx_jar_file_path}").exists()) {
//            if (isWindows) {
//                copy {
//                    from "${d8_jar_file_path}"
//                    into "${dx_jar_file_path}"
//                }
//            } else {
//                exec {
//                    commandLine 'ln', '-s', "${d8_jar_file_path}", "${dx_jar_file_path}"
//                }
//            }
//        }
//    }
//}