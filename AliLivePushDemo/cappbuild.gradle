import java.util.zip.CRC32
import java.util.zip.CheckedOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

apply plugin: 'com.android.application'

android {
    flavorDimensions 'pusher'
    productFlavors {
        demo {
            dimension 'pusher'
            signingConfig signingConfigs.debug
            minSdkVersion androidMinSdkVersion
            targetSdkVersion androidTargetSdkVersion
            compileSdkVersion androidCompileSdkVersion
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }

        alivctest {
            dimension 'pusher'
            signingConfig signingConfigs.debug
            minSdkVersion androidMinSdkVersion
            targetSdkVersion androidTargetSdkVersion
            compileSdkVersion androidCompileSdkVersion
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }

    }
    sourceSets {

        alivctest {
            manifest.srcFile 'src/alivctest/AndroidManifest.xml'
            java.srcDirs = ['src/alivctest/java']
            res.srcDirs = ['src/alivctest/res']
            jniLibs.srcDirs = ['src/alivctest/libs']

        }
    }
}

dependencies {
    alivctestImplementation fileTree(include: ['*.jar', '*.aar'], dir: 'src/alivctest/libs')
    alivctestImplementation 'com.aliyun.ams:alicloud-android-ha-crashreporter:1.2.5'
    alivctestImplementation 'com.aliyun.ams:alicloud-android-ha-adapter:1.1.5.1-open'
    alivctestImplementation 'com.aliyun.ams:alicloud-android-apm:1.0.10.0-open'

//    alivctestImplementation ('com.alibaba.lancet:lancet-android-rpc:2.0.0.1-SNAPSHOT') {
//        transitive = true
//    }
//    alivctestImplementation ('com.alibaba.lancet:lancet-plugin-http:1.0.0.1-SNAPSHOT') {
//        transitive = true
//    }
}

ext {
//监听打包
    PATH_ZIP = File.separator + "outZip"
    PATH_BASE = File.separator + "out"
    SRC_PATH = getRootDir().path
    DST_PATH = SRC_PATH + PATH_BASE
    OUT_ZIP_PATH = SRC_PATH + PATH_ZIP + File.separator + 'AlivcLivePusher_Demo_Android.zip'
}

getGradle().addBuildListener(new BuildListener() {
    boolean generateZip = false;

    @Override
    void buildStarted(Gradle gradle) {


    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "*************** projectsEvaluated *****************"
        if (project.hasProperty("czip") && "1".equals(czip)) {
            generateZip = true;
        }


        if (generateZip) {
            println "*************** startOutZip *****************"
            //删除out文件夹下的内容
            delete ext.DST_PATH;
            //删除outZip文件夹下所有的zip文件
            delete ext.OUT_ZIP_PATH

        }

    }

    @Override
    void buildFinished(BuildResult result) {
        println "*************** buildFinished *****************"
        if (generateZip) {
            copyModule();
        }

    }
})


void copyModule() {

    def mainPath = getProject().getProjectDir().getAbsolutePath();
    def mainName = getProject().getName();
    def animGradleScriptPath = ext.DST_PATH + File.separator + mainName
    def excludeAlivcTestFlavorDir = mainName +File.separator + "src"+File.separator+"alivctest"
    copy {
        from ext.SRC_PATH
        into ext.DST_PATH
        exclude ".idea"
        exclude ".gradle"
        exclude "alivc-livepusher-lib"
        exclude "out"
        exclude "**.sh"
        exclude "cappbuild.gradle"
        exclude excludeAlivcTestFlavorDir
    }


    copy {
        from mainPath + File.separator + "build.gradle"
        into animGradleScriptPath
        filter { String line -> line.trim().startsWith("apply from: '../cappbuild.gradle'") ? null : line }
        filter { String line -> line.trim().startsWith("demoImplementation") ? line.replace("demoImplementation","implementation") : line }
    }

    compress(ext.DST_PATH,ext.OUT_ZIP_PATH)
}


void compress(String srcPath, String dstPath) throws IOException {
    File srcFile = new File(srcPath);
    File dstFile = new File(dstPath);
    if (!srcFile.exists()) {
        throw new FileNotFoundException(srcPath + "不存在！");
    }
    if (!dstFile.exists()) {
        dstFile.parentFile.mkdirs()
    }
    FileOutputStream out = null;
    ZipOutputStream zipOut = null;
    try {
        out = new FileOutputStream(dstFile);
        CheckedOutputStream cos = new CheckedOutputStream(out, new CRC32());
        zipOut = new ZipOutputStream(cos);
        String baseDir = "";
        compress(srcFile, zipOut, baseDir);
    }
    finally {
        if (null != zipOut) {
            zipOut.close();
            out = null;
        }

        if (null != out) {
            out.close();
        }
    }
}
void compress(File file, ZipOutputStream zipOut, String baseDir) throws IOException {
    if (file.isDirectory()) {
        compressDirectory(file, zipOut, baseDir);
    } else {
        compressFile(file, zipOut, baseDir);
    }
}

/** 压缩一个目录 */
void compressDirectory(File dir, ZipOutputStream zipOut, String baseDir) throws IOException {
    File[] files = dir.listFiles();
    for (int i = 0; i < files.length; i++) {
        compress(files[i], zipOut, baseDir + dir.getName() + File.separator);
    }
}

/** 压缩一个文件 */
void compressFile(File file, ZipOutputStream zipOut, String baseDir) throws IOException {
    if (!file.exists()) {
        return;
    }
    BufferedInputStream bis = null;
    try {
        bis = new BufferedInputStream(new FileInputStream(file));
        ZipEntry entry = new ZipEntry(baseDir + file.getName());
        zipOut.putNextEntry(entry);
        int count;
        byte[] data = new byte[8192];
        while ((count = bis.read(data, 0, 8192)) != -1) {
            zipOut.write(data, 0, count);
        }

    } finally {
        if (null != bis) {
            bis.close();
        }
    }
}